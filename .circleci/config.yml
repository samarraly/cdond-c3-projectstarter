version: 2.1
orbs: 
  slack: circleci/slack@4.10.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        default: ${CIRCLE_WORKFLOW_ID:0:7}
        type: string        
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm --recursive s3://udapeople-<<parameters.workflow_id>>
            aws cloudformation delete-stack \
              --stack-name "udapeople-backend-<<parameters.workflow_id>>
            aws cloudformation delete-stack \
              --stack-name "udapeople-frontend-<<parameters.workflow_id>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
     workflow_id:
        default: ${CIRCLE_WORKFLOW_ID:0:7}
        type: string    
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/9GE4jRtKznmVKRfvdBABBe/migration_<<parameters.workflow_id>>)
            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
                cd ~/project/backend
                npm install
                npm run migration:revert
            fi  
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
            
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install 
            npm run build
            
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: front-end test
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test      
            
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: back-end test
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test         
            
  scan-frontend:
    docker:
     - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache: 
          keys: [frontend-scan]
      - run:
          name: frontend scan  
          command: |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
           
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-scan       

  scan-backend:
    docker:
     - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - run:
          name: backend scan
          command: |
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
          
      - save_cache:
          paths: [backend/node_modules]
          key: backend-scan        

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
            
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
           
            
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo "http://$BACKEND_PUBLIC_IP:3030" >> .circleci/backend_public_url.txt
            echo "$BACKEND_PUBLIC_IP" >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/backend_public_url.txt
            - project/.circleci/ansible/inventory.txt
      - destroy-environment      
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      # - image: cimg/base:stable
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ['d1:4c:36:8c:e5:63:a2:96:8f:ed:3b:20:a4:7a:49:c4'] 
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            cd ~/project/.circleci/ansible
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure  
      - destroy-environment      

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            echo "NODE_ENV=local
              VERSION=1
              TYPEORM_CONNECTION=postgres
              TYPEORM_MIGRATIONS_DIR=./src/migrations
              TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts
              TYPEORM_MIGRATIONS=./src/migrations/*.ts
              TYPEORM_HOST=database-1.c8cnswx5frwu.us-east-1.rds.amazonaws.com
              TYPEORM_PORT=5432
              TYPEORM_USERNAME=postgres
              TYPEORM_PASSWORD=postgres   
              TYPEORM_DATABASE=postgres" >> .env
            cat .env
            npm run migrations > migrations_dump.txt
            echo "Migration Result:------"
            cat migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            cd ~/project/backend
            if grep -q "has been executed successfully" ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/ViqwC4xejgM3mkgWEG6oF5/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
     # Here's where you will add some code to rollback on failure   
      - destroy-environment


  deploy-frontend:
    docker:
      # - image: cimg/base:stable
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      - add_ssh_keys:
          fingerprints: ['d1:4c:36:8c:e5:63:a2:96:8f:ed:3b:20:a4:7a:49:c4'] 
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update tar gzip ansible nodejs npm curl
            pip3 install awscli
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo '$API_URL=${API_URL}'
            
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm install 
            npm run build 
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure
      # - destroy-environment
      # - revert-migrations     
                    
  deploy-backend:
    docker:
      #  - image: cimg/base:stable
      - image: python:3.7-alpine3.11
        environment:
          NODE_ENV: "local"
          VERSION: "1"
          ENVIRONMENT: "production"
          TYPEORM_CONNECTION: $TYPEORM_CONNECTION
          TYPEORM_HOST: $TYPEORM_HOST
          TYPEORM_USERNAME: $TYPEORM_USERNAME
          TYPEORM_PASSWORD: $TYPEORM_PASSWORD
          TYPEORM_DATABASE: $TYPEORM_DATABASE
          TYPEORM_PORT: $TYPEORM_PORT
          TYPEORM_ENTITIES: ./src/modules/domain/**/*.entity.ts
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ['d1:4c:36:8c:e5:63:a2:96:8f:ed:3b:20:a4:7a:49:c4'] 
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli
      - run:
          name: Deploy backend
          command: |
            # your code here
            cd backend
            npm i
            npm run build
            cd ..
            cd .circleci/ansible
            mkdir files
            cd files
            # Zip the directory
            tar -C ../../../backend -czvf artifact.tar.gz .
            # cd .circleci/ansible
            cd ../
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment
      - revert-migrations    

  smoke-test:
    docker:
      # Lightweight Docker image 
      # - image: cimg/base:stable
      - image: python:3.7-alpine3.11
    steps:

      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            
            apk add --update nodejs npm curl
            pip install awscli --upgrade 
      - run:
          name: Get backend url
          command: |
            
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            echo $BACKEND_IP
      - run:
          name: Backend smoke test.
          command: |
           
            BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            echo $BACKEND_IP
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo backend-${CIRCLE_WORKFLOW_ID:0:7}
            if curl -s ${API_URL}/api/status | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
              URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
              echo ${URL} 
              if curl -s ${URL} | grep "Welcome"
              then
                exit 1
              else
                exit 1
              fi
      # Here's where you will add some code to rollback on failure
      # - destroy-environment
      # - revert-migrations   

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      # - run:
      #     name: Install dependencies
      #     command: |
      #       # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            aws cloudformation update-stack \
              --use-previous-template --stack-name InitialStack \
              --parameters ParameterKey=WorkflowID,ParameterValue=${CIRCLE_WORKFLOW_ID:0:7},UsePreviousValue=false
      # Here's where you will add some code to rollback on failure
      - destroy-environment
      - revert-migrations  

# cleanup:
#     docker:
#       # Docker image here
#       - image: amazon/aws-cli
#     steps:
#       - checkout
#       - run:
#           # name: Get old stack workflow id
#           # command: |
          
#       - run:
#           name: Remove old stacks and files
#           command: |
#             export OldWorkflowID=$(aws cloudformation \
#                     list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
#                     --no-paginate --output text)
#             echo OldWorkflowID: "${OldWorkflowID}"
#             echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
#             # Fetch the stack names          
#             export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
#                     --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
#             echo Stack names: "${STACKS[@]}"

#             if [[ "${CIRCLE_WORKFLOW_ID:0:7}" =~ "${OldWorkflowID}" ]]
#             then
#               echo "-----------DELETE CONFIRMED--------------"
                    
#               aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
#               aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
#               aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}" 
#             else
#               echo "-----------DELETE CONFIRMED--------------"
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend 
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update] 